name: Test develop

permissions:
  contents: write

on:
  pull_request:
    types: [ opened, reopened ]  # Aciona quando um PR é aberto ou reaberto
    branches: [ integration ]  # Apenas para PRs que visam a branch integration

env:
  IMAGE_NAME: api-irrigacao
  AZURE_WEBAPP_NAME: api-integracao-dev

jobs:
  test-develop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run Tests
        run: mvn test  # Altere conforme necessário para seu projeto

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Adicione seu token do SonarCloud aos Secrets do GitHub
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=duhhdm_api-irrigacao \
            -Dsonar.organization=duhhdm-1 \
            -Dsonar.host.url=https://sonarcloud.io \
      - name: Check Quality Gate Status
        id: check_quality_gate
        run: |
          status=$(curl -s -u $SONAR_TOKEN: \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=duhhdm_api-irrigacao" | jq -r '.projectStatus.status')
          echo "Quality Gate status is $status"
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed"
            exit 1
          fi    -Dsonar.login=$SONAR_TOKEN
  build:
    runs-on: ubuntu-latest
    needs: sonarcloud-scan
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Java SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:v2
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PROFILE_DEV }}
          images: 'index.docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:v2'